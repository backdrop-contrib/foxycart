<?php

// $Id$

/**
 *
 *
 * @file foxycart_uc.module
 *
 * Module to provide integration of FoxyCart with Ubercart.
 *
 * Copyright (c) 2012 Jason York
 *
 */


include_once "foxycart_uc_datafeed.inc.php";

function foxycart_uc_menu() {
  $items = array();

  // View the datafeed in the order view
  $items['admin/store/orders/%uc_order/datafeed'] = array(
    'title' => 'Datafeed',
    'page callback' => 'foxycart_uc_view_datafeed',
    'page arguments' => array( 3 ),
    'access arguments' => array( 'view all orders' ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  return $items;
}

function uc_cart_complete_sale( $order, $login = FALSE ) {
  // Stub for Ubercart's function.  This is called by uc_payment_enter
}


function foxycart_uc_get_zone_id( $zone_code ) {
  // Ubercart currently doesn't provide a way to get the zone_id based on zone code.  This is to fill that need

  $result = db_query( "SELECT zone_id FROM {uc_zones} WHERE zone_code = :code", array( ':code' => $zone_code ) );

  if ( $row = $result->fetchObject() ) {
    return $row->zone_id;
  }

  return FALSE;
}

function foxycart_uc_theme( $existing, $type, $theme, $path ) {
  return array(
    'foxycart_uc_add_to_cart' => array(
      'variables' => array( 'form' => NULL ),
    )

  );
}

function foxycart_uc_is_supported_node($node) {
  return isset( $node->type ) && ($node->type == 'product' || $node->type == 'product_kit');
}

function foxycart_uc_node_view( $node, $view_mode, $langcode ) {
  if ( foxycart_uc_is_supported_node($node) ) {
    $variant = empty( $node->variant ) ? _uc_product_get_variant( $node ) : $node;

    // Build the 'add to cart' form, and use the updated variant based on data
    // provided by the form (e.g. attribute default options).
    if ( $variant->nid && empty( $variant->data['display_only'] ) ) {
      $add_to_cart_form = drupal_get_form( 'uc_product_add_to_cart_form_' . $variant->nid, $variant );
      if ( variable_get( 'uc_product_update_node_view', FALSE ) ) {
        $variant = $add_to_cart_form['node']['#value'];
      }
    }
    if ( isset( $add_to_cart_form ) ) {
      if ( isset( $add_to_cart_form['attributes'] ) ) {
        // This removes the Ubercart version of the product options
        // At this point, the FoxyCart version has already been added
        // by foxycart_uc_form_alter
        unset( $add_to_cart_form['attributes'] );
      }
      unset( $add_to_cart_form['qty'], $add_to_cart_form['#token'], $add_to_cart_form['form_build_id'], $add_to_cart_form['#build_id'], $add_to_cart_form['form_id'] );
      $node->content['add_to_cart'] = array(
        '#theme' => 'uc_product_add_to_cart',
        '#view_mode' => $view_mode,
        '#form' => $add_to_cart_form,
      );


    }
  }
  return $node;
}



function foxycart_uc_form_alter( &$form, $form_state, $form_id ) {
  if ( $form_id == 'uc_product_add_to_cart_form'  ) {

    $node =& $form['node']['#value'];
    $options = foxycart_uc_get_product_option_fields( $node );
    if ( count( $options ) ) {
      $form['fc_attributes'] = array(
        '#type' => 'fieldset',
        '#title' => t( 'Options' ),
      );
      $form['fc_attributes'] = array_merge( $form['fc_attributes'], $options );
    }
  }
  if ( strpos( $form_id, 'uc_catalog_buy_it_now_form' ) !== FALSE ) {

    $node =& $form['node']['#value'];
    $options = foxycart_uc_get_product_option_fields( $node );
    if ( count( $options ) ) {
      $form['fc_attributes'] = array(
        '#type' => 'fieldset',
        '#title' => t( 'Options' ),
      );
      $form['fc_attributes'] = array_merge( $form['fc_attributes'], $options );
    }
    //print "<Pre>"; print_r($form); print "</pre>"; exit;
    foxycart_uc_modify_cart_form( $form );
  }
}

function foxycart_uc_form_uc_product_settings_form_alter(&$form, &$form_state) {
  $form['product']['foxycart_uc_add_to_cart_qty'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display an optional quantity field in the <em>Add to Cart</em> form.'),
    '#default_value' => variable_get('foxycart_uc_add_to_cart_qty', FALSE),
  );
  $form['product']['foxycart_uc_update_node_view'] = array(
    '#type' => 'checkbox',
    '#title' => t('Update product display based on customer selections'),
    '#default_value' => variable_get('foxycart_uc_update_node_view', FALSE),
    '#description' => t('Check this box to dynamically update the display of product information such as display-price or weight based on customer input on the add-to-cart form (e.g. selecting a particular attribute option).'),
  );
}


function foxycart_uc_get_product_option_fields( &$product ) {

  // If the product doesn't have attributes, return the form as it is.
  if ( empty( $product->attributes ) || !is_array( $product->attributes ) ) {
    return array();
  }

  $nid = $product->nid;
  $attributes = $product->attributes;
  $priced_attributes = uc_attribute_priced_attributes( $nid );

  // Initialize the form element.
  $form_options = array();


  // Loop through each product attribute and generate its form element.
  foreach ( $attributes as $attribute ) {
    $form_option = array();
    $name = _uc_attribute_get_name( $attribute, FALSE );
    $form_option['#title'] = $name;
    $form_option['#description'] = filter_xss( $attribute->description );
    $form_option['#required'] = $attribute->required;

    switch ( $attribute->display ) {
    case 1:
      $form_option['#type'] = 'select';
      break;
    case 2:
      $form_option['#type'] = 'radios';
      break;
    case 3:
      $form_option['#type'] = 'checkboxes';
      $attribute->default_option = array();
      break;
    default:
      $form_option['#type'] = 'textfield';
      $form_option['#default_value'] = '';
      $optionName = foxycart_get_product_attribute( $product->model, urlencode( $name ), '--OPEN--' );
      $form_option['#name'] = $optionName;  
      break;   
    }

    $data = array( 'display_only' => TRUE ) + $product->data;
    if ( empty( $data['attributes'] ) ) {
      $data['attributes'] = array();
    }
    $base = node_view( uc_product_load_variant( $product->nid, $data ), 'teaser' );

    // Build the attribute options
    $form_option['#options'] = array();

    if ( count( $attribute->options ) && $attribute->display > 0 ) {

      //  If we have a select box that's not required add the "Select..." option
      // and make it the default.
      if ( $form_option['#type'] == 'select' && $attribute->required == 0 ) {
        $form_option['#options'][''] = t( 'None' );
        $form_option['#default_value'] = '';
      }

      foreach ( $attribute->options as $option ) {
        $data['attributes'] = array( $attribute->aid => $option->oid ) + $data['attributes'];
        $variant = node_view( uc_product_load_variant( $product->nid, $data ), 'teaser' );

        $display_price = "";

        if ( in_array( $attribute->aid, $priced_attributes ) ) {
          $adjustment = $variant['display_price']['#value'] - $base['display_price']['#value'];
 
          unset( $fcPriceModifier );
          if ( $adjustment != 0 ) {
            $fcPriceModifier = $adjustment > 0 ? '+' : '';
            $fcPriceModifier .= $adjustment;
          }

          $display_price = ( $adjustment > 0 ? '+' : '-' ) . uc_currency_format( abs( $adjustment ) );
        }   

        $weight_adjustment = $variant['weight']['#amount'] - $base['weight']['#amount'];
        unset( $fcWeightModifier );
        if ( $weight_adjustment != 0 ) {
          $fcWeightModifier = $weight_adjustment > 0 ? '+' : '';
          $fcWeightModifier .= $weight_adjustment;
        }

        $fcModifiers = array();
        isset( $fcPriceModifier ) ? $fcModifiers[] = 'p' . $fcPriceModifier : '';
        isset( $fcWeightModifier ) ? $fcModifiers[] = 'w' . $fcWeightModifier : '';

        $optionName = $attribute->display == 2 ? check_plain( $option->name ) : $option->name;
        $optionValue = foxycart_get_product_attribute( $product->model, urlencode( $name ), urlencode( $optionName ) .
          ( count( $fcModifiers ) > 0 ? '{' . implode( '|', $fcModifiers ). '}' : '' ),
          'value' );

        $form_option['#options'][$optionValue] = $optionName;
        if ($display_price != "") {
           $form_option['#options'][$optionValue] .=  ", " . $display_price;
        }

        // Set correct default values for radios and select boxes
        if ( $attribute->default_option == $option->oid ) {
          if ( $form_option['#type'] == 'radios' ) {
            $form_option['#default_value'] = $optionValue;
          }
          if ( $form_option['#type'] == 'select' && $attribute->required == 1 ) {
            $form_option['#default_value'] = $optionValue;
          }
        }
      }

      // If the radio options is not required, add "none" to the end of the list.
      if ( $form_option['#type'] == 'radios' && $attribute->required == 0 ) {
        $form_option['#options'][''] = t( 'None' );
      }
    }

    $form_options[urlencode( $name )] = $form_option;

  }

  return $form_options;
}


/**
 * Implements hook_module_implements_alter().
 *
 * Ensures that attribute form changes are made after (e.g.) product kits.
 */
function foxycart_uc_module_implements_alter( &$implementations, $hook ) {
  if ( $hook == 'uc_form_alter' ) {
    $group = $implementations['foxycart_uc'];
    unset( $implementations['foxycart_uc'] );
    $implementations['foxycart_uc'] = $group;
  }
}


function foxycart_uc_add_product_categories( &$node, &$form ) {
  if ( isset( $node->taxonomy_catalog ) && isset( $node->taxonomy_catalog[$node->language] ) ) {
    foreach ( $node->taxonomy_catalog[$node->language] as $delta => $value ) {
      $term = taxonomy_term_load( $value['tid'] );
    }
    if ( isset( $term->name ) ) {
      $form[foxycart_get_product_attribute( $node->model, 'category', $term->name )] = array( '#type' => 'hidden', '#value' => $term->name );
    }
  }
}

/**
 * Form to add the $node product to the cart.
 *
 * @param unknown $node
 *   A product node.
 *
 * @see uc_product_forms()
 * @see uc_product_add_to_cart_form_submit()
 * @ingroup forms
 */
function foxycart_uc_uc_form_alter( &$form, &$form_state, $form_id ) {
  if ( strpos( $form_id, 'add_to_cart_form' ) ) {
    return foxycart_uc_modify_cart_form( $form );
  }
}
function foxycart_uc_modify_cart_form( &$form ) {

  $form['#action'] = 'https://' . foxycart_get_domain() . '.foxycart.com/cart';
  unset( $form['form_build_id'] );
  unset( $form['form_token'] );
  unset( $form['form_id'] );
  $form['#token'] = FALSE;

  $node =& $form['node']['#value'];
  if ( !is_object( $node ) ) {
    $node = node_load( $form['nid']['#value'] );
    unset( $form['nid'] );
  }


  $form[foxycart_get_product_attribute( $node->model, 'code', $node->model )] = array( '#type' => 'hidden', '#value' => $node->model );
  $form['name'] = array( '#type' => 'hidden', '#value' => foxycart_get_product_attribute( $node->model, 'name', $node->title, 'value' ) );
  $form[foxycart_get_product_attribute( $node->model, 'price', $node->price )] = array( '#type' => 'hidden', '#value' => $node->price );

  if ( isset( $node->uc_product_image["und"][0]["uri"] ) ) {
    $img_url = image_style_url( 'thumbnail', $node->uc_product_image["und"][0]["uri"] );
    $form[foxycart_get_product_attribute( $node->model, 'image', $img_url )] = array( '#type' => 'hidden', '#value' => $img_url );

  }

  $form[foxycart_get_product_attribute( $node->model, 'url', url( 'node/' . $node->nid, array( 'absolute'=>true ) ) )] = array( '#type' => 'hidden', '#value' => url( 'node/' . $node->nid, array( 'absolute'=>true ) ) );
  $form[foxycart_get_product_attribute( $node->model, 'weight', $node->weight )] = array( '#type' => 'hidden', '#value' => $node->weight );
  $form[foxycart_get_product_attribute( $node->model, 'nid', $node->nid )] = array( '#type' => 'hidden', '#value' => $node->nid );
  foxycart_uc_add_product_categories( $node, $form );

  $form['actions'] = array( 
    '#type' => 'actions', 
    '#attributes' => array(
      'class' => array('container-inline' ),
    ),      
  );

  if ( $node->default_qty > 0 && variable_get( 'foxycart_uc_add_to_cart_qty', FALSE ) ) {
    $form['actions'][foxycart_get_product_attribute( $node->model, 'quantity', '--OPEN--' )] = array(
      '#type' => 'textfield',
      '#title' => t( 'Quantity' ),
      '#default_value' => $node->default_qty,
      '#attributes' => array(
        'size' => array('5'),
        ),
      );
  }
  else {
    $form['actions'][foxycart_get_product_attribute( $node->model, 'quantity', $node->default_qty ? $node->default_qty : 1 )]
      = array( '#type' => 'hidden', '#value' => $node->default_qty ? $node->default_qty : 1 );
  }


  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t( 'Add to cart' ),
    '#id' => 'edit-submit-' . $node->nid,
    '#attributes' => array(
      'class' => array( 'node-add-to-cart' ),
    ),
  );

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

}



?>
